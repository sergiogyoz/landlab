import numpy as np
from landlab import Component #base class from which components inherit

class DumbC(Component):
    """
    
    """
    
    ###### Required landlab component fields
    # the prefix underscore means is "intended for internal use only"
    _name="SuperDuperComponent"; 
    
    _unit_agnostic = True;
    
    _info = { #here you put the metadata of your class
        "dumb_height": {
            "dtype": float, #data type
            "intent": "inout", #is it input or ouput or both?
            "optional": False, #is it optional?
            "units": "m", #what units?
            "mapping": "node", #is it associated to nodes? links? faces? etc
            "doc": "multiplies the height values 'cause... Idk, math", # description of the field/value
        },
        "lalala": {
            "dtype": float, #data type
            "intent": "in", #is it input or ouput or both?
            "optional": True, #is it optional?
            "units": "m", #what units?
            "mapping": "node", #is it associated to nodes? links? faces? etc
            "doc": "multiplies the height values 'cause... Idk, math", # description of the field/value
        }
    }
    
    #cite info for autogenerated citations in TeX Bib format
    _cite_as = """@article{leMua2021DumbComponent,
      doi = {55.555/saywa555},
      url = {https://55.555/saywa555},
      year = {2021},
      publisher = {WeGetYourShitOut},
      volume = {1},
      number = {11},
      pages = {111},
      author = {Sergio Villamarin and Jane Gloriana Villanueva},
      title = {Components on landlab: Learn how the fuck to use them},
      journal = {The "I hope to get better" Journal of science}
    }"""
    
    ##### Requirements end
    
    
    ##### Constructor begins 
    
    #_init is a the constructor method for the class (component in this case)
    def __init__(self, grid, #grid should always be a parameter of a landlab component
                 bh=20, s=1): #my default values for my component field 
        """
        Parameters
        ----------
        grid: RasterModelGrid
            A grid.
        a_base_height: float, optional
            A height that I will add to my dumb_height values at every node.
        """ #this is the docstring so python users and IDLEs see a brief explanation of your class/method
        
        #this goes up to component and inherets all of its fields here, so everything a component has, our component does too
        super().__init__(grid); 
        
        #my own class values
        self.a_base_height=bh; 
        self.spread= s; 
        
        #a reference to my own grid field dumb_height to use in the class
        self.dhs=self._grid.at_node["dumb_height"];
        self.dhs=self.dhs+self.a_base_height;
        
    ##### Constructor ends
    
    
    ##### landlab requires a run_one_step or a custom update function 
    
    #if time delta is important for the update then we use this
    def run_one_step(self, dt): 
        delta_spread=dt*self.spread;
        self.dhs=self.dhs;
        for i in range(len(self.dhs)):
            self.dhs[i]=self.dhs[i]+np.random.standard_normal()*delta_spread;
    #if time delta is not important or is not a temporal update then we use our custom update function
    def update_dumb_heights(self): 
        self.dhs=self.dhs;
        for i in range(len(self.dhs)):
            self.dhs[i]=self.dhs[i]+np.random.standard_normal()*self.spread;
    
    ##### end of update function
    
    
    ##### custom class methods, getters and setters can go here
    #see decorators for more details on what type of methods a component class can have etc
    
    